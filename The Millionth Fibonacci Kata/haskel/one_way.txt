{-# LANGUAGE MultiWayIf #-}
module Fibonacci where

import Data.Map.Strict (Map, fromList, member, (!), insert)
import Control.Monad.State

fib :: Integer -> Integer
fib n = case compare n 0 of
  EQ -> 0
  LT -> (parity *) . fib $ abs n
  GT -> fst . fib2 $ n - 1
  where parity = if odd n then 1 else -1

-- | Return (fib n, fib (n + 1))
fib2 0 = (1, 1)
fib2 1 = (1, 2)
fib2 n
 | even n    = (a*a + b*b, c*c - a*a)
 | otherwise = (c*c - a*a, b*b + c*c)
 where (a,b) = fib2 (n `div` 2 - 1)
       c     = a + b