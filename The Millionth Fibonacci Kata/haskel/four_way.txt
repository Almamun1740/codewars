module Fibonacci where

data Mat = Mat Integer Integer Integer Integer
  deriving (Eq, Ord, Read, Show)

mult :: Mat -> Mat -> Mat
mult (Mat a11 a12 a21 a22) (Mat b11 b12 b21 b22)
  = Mat (a11 * b11 + a12 * b21)
        (a11 * b12 + a12 * b22)
        (a21 * b11 + a22 * b21)
        (a21 * b12 + a22 * b22)

pow :: Integer -> Mat -> Mat
pow 0 _ = Mat 1 0 0 1
pow n mat
  | r == 0 = mat2
  | otherwise = mult mat2 mat
  where
    (n', r) = divMod n 2
    mat' = pow n' mat
    mat2 = mult mat' mat'

fib :: Integer -> Integer
fib n
  | n >= 0 = let Mat _ a12 _ _ = pow n (Mat 0 1 1 1) in a12
  | otherwise = let Mat _ a12 _ _ = pow (-n) (Mat (-1) 1 1 0) in a12